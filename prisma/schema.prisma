// Prisma schema (SQLite for local dev; replace with Postgres in prod)
// npx prisma init --datasource-provider sqlite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         String   @default("owner")
  status       String   @default("active")
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  avatarKey    String?
}

model Client {
  id            String   @id @default(cuid())
  displayName   String
  firstName     String?
  lastName      String?
  email         String
  phone         String?
  altPhone      String?
  address       String?
  taxIdPartial  String?
  dob           DateTime?
  company       String?
  website       String?
  status        String   @default("Lead")
  source        String?
  tags          Json
  assignedToId  String?
  notes         String?
  createdBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Interaction {
  id        String   @id @default(cuid())
  clientId  String
  type      String
  subject   String?
  body      String?
  userId    String?
  at        DateTime @default(now())
}

model Document {
  id        String   @id @default(cuid())
  clientId  String
  kind      String
  fileKey   String
  filename  String
  uploadedBy String?
  uploadedAt DateTime @default(now())
  privacy   String   @default("private")
  expiresAt DateTime?
}

model Contract {
  id        String   @id @default(cuid())
  clientId  String
  templateId String?
  signed     Boolean  @default(false)
  signedAt   DateTime?
  esignLink  String?
  fee        Int      @default(0)
  status     String   @default("draft")
}

model Task {
  id         String   @id @default(cuid())
  clientId   String?
  title      String
  description String?
  dueDate    DateTime?
  priority   String   @default("normal")
  assignedTo String?
  status     String   @default("todo")
}

model Event {
  id         String   @id @default(cuid())
  title      String
  start      DateTime
  end        DateTime
  timezone   String   @default("UTC")
  type       String   @default("appointment")
  clientId   String?
  location   String?
  notes      String?
  attendees  Json
  createdBy  String?
  assignedTo String?
  status     String   @default("confirmed")
}

model Revenue {
  id         String   @id @default(cuid())
  date       DateTime
  service    String
  clientId   String?
  amount     Int
  method     String?
  createdBy  String?
  notes      String?
}

model AuditLog {
  id        String   @id @default(cuid())
  userEmail String?
  action    String
  entity    String
  entityId  String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  meta      Json?
}

model IntegrationToken {
  id           String   @id @default(cuid())
  provider     String
  userEmail    String
  accessToken  String
  refreshToken String?
  expiryDate   DateTime?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([provider, userEmail])
}

// Singleton row to store site-wide content and asset URLs.
model SiteSetting {
  id           String   @id @default("singleton")
  // Branding
  logoUrl      String?
  faviconUrl   String?
  // People
  founderUrl   String?
  team         Json     // array of {name,title,bio,image,socials[]}
  // About page gallery images
  aboutGallery Json     // array of string URLs
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

// Global site settings (single row). Store JSON blobs for flexible content.
model SiteSettings {
  id            String   @id @default("singleton")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  branding      Json     // { logoUrl, faviconUrl }
  founder       Json     // { name, title, photoUrl, bio }
  aboutGallery  Json     // string[] of image URLs
}

// Team members managed in Admin Settings
model TeamMember {
  id         String   @id @default(cuid())
  name       String
  title      String?
  bio        String?
  imageUrl   String?
  roleLabel  String?   // e.g., Operations, Advisor, Coordinator
  userEmail  String?   // link to User by email if applicable
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@index([userEmail])
}
